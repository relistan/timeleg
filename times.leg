%{
#include <stdio.h>

#define LEN_MONTH 16
#define LEN_DAY 3
#define LEN_YEAR 5
#define LEN_TIME 12
#define LEN_TIMEZONE 6

char month[LEN_MONTH] = "";
char day[LEN_DAY] = "";
char year[LEN_YEAR] = "";
char time[LEN_TIME] = "";
char tz[LEN_TIMEZONE] = "";

// Defined below
char *get_month(char *month);
char *get_day(char *month);
char* get_time(char* time);

//#define YY_DEBUG 1
%}

# ENTRYPOINT
doc  = line+ eof
line = (date | anything)* eol
date = time? ignored* date_any ignored* time? ignored* tz?	        					{
	   																						printf("%s-%s-%s %s %s\n", year, get_month(month), get_day(day), get_time(time), tz);
																							month[0] = '\0'; day[0] = '\0'; year[0] = '\0'; time[0] = '\0'; tz[0] = '\0';
	   																					}
# Dates -----
date_any      = date_iso | date_forward | date_reverse
date_forward  = (year sep+ month sep+ day) | (month+ sep+ day sep+ year) | (month sep+ day sep+ year_short) | (month sep+ day) | (month sep+ year)
date_reverse  = (day sep* month sep* year) | (day sep* month) | (year sep* month)
date_iso      = (year '-' month '-' day [T ] time time_millis? tz) | (year '-' month '-' day) 

# Months -----
month = < ( month_long | month_short | month_numeric ) >  								{ strncpy((char *)(&month), yytext, LEN_MONTH); }

month_short   = ( 'Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' | 'Jul' | 'Aug' | 'Sep' | 'Oct' | 'Nov' | 'Dec' )
month_long    = ( 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December' )
month_numeric = !year ( '12' | '11' | '10' | ('0'? '1') | ('0'? '2') | ('0'? '3') | ('0'? '4') | ('0'? '5') | ('0'? '6') | ('0'? '7') | ('0'? '8') | ('0'? '9') ) !':' 

# Days -----
day  = !':' < ('31' | '30' | [0-2]?[0-9]) > ( 'st' | 'nd' | 'rd' | 'th')? !':'			{ strncpy((char *)(&day), yytext, LEN_DAY); }

# Years -----
year       = < [0-9][0-9][0-9][0-9] >													{ strncpy((char *)(&year), yytext, LEN_YEAR); }
year_short = < [0-9][0-9] >																{ snprintf(year, LEN_YEAR, "20%s", yytext); }

# Times -----
time        = < (time_short | time_full) >												{ strncpy((char *)(&time), yytext, LEN_TIME); }
time_full   = ( [0-2]? [0-9] ':' [0-9][0-9] ':' [0-9][0-9] ) &( time_millis | (space* 'AM' | 'PM') )?
time_short  = ( [0-2]? [0-9] ':' [0-9][0-9] ) &space ('AM' | 'PM')? 
time_millis = ( [.,][0-9]+ )

# Timezone -----
tz = <('Z' | ( ('+' | '-') [0-9][0-9] (':'? [0-9][0-9]) ))>								{ strncpy((char *)(&tz), yytext, LEN_TIMEZONE); }

# Misc -----
sep = [\t ,/.\-]
space = [\t ]
ignored = (space | !day !month !year !tz !time !eol .)
anything = !eol .
eof = !.
eol = ( '\n' | '\r\n' | '\n\r')

%%

// Dictionaries we need to look up month numeric values
char* long_months[] = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
char* short_month[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
char* int_str[] =     { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };

// Turn short or long month names or short numeric values into double-digit numeric values
char *get_month(char *month) {
	if (strnlen(month, LEN_MONTH) == 1) {
		int index = atoi(month);
	   	if (index > 12) {
	   		return ""; // Some other weird match
	   	}	
		snprintf(month, LEN_MONTH, "%s", int_str[index-1]);
		return month;
	}
	if (strnlen(month, LEN_MONTH) == 2) {
		return month;
	}
	for (int i = 0; i < 12; i++) {
	    if (strcmp(month, short_month[i]) == 0) {
			return int_str[i];
	    }
	    if (strcmp(month, long_months[i]) == 0) {
			return int_str[i];
	    }
	}
	return month;
}

char *get_day(char *day) {
	if (strnlen(day, LEN_DAY) == 2) {
		return day;
	}
	return int_str[atoi(day)-1];
}

char* get_time(char* time) {
	char *formatted[LEN_TIME];
    int hours = 0, minutes = 0, seconds = 0;
    int part = 0; // 0: hours, 1: minutes, 2: seconds
    int temp_value = 0;

    if (strnlen(time, LEN_TIME) == 0) {
        return time;
    }

    for (int i = 0; time[i] != '\0'; i++) {
        if (time[i] >= '0' && time[i] <= '9') { // Check if the character is a number
            // Accumulate the number
            temp_value = temp_value * 10 + (time[i] - '0');
        } else if (time[i] == ':') {
            // Assign the accumulated number to the corresponding part
            if (part == 0) {
                hours = temp_value;
            } else if (part == 1) {
                minutes = temp_value;
            }
            part++;
            temp_value = 0; // Reset temp_value for the next part
        } else {
            return time;
        }
    }

    // Assign the last accumulated value to the appropriate part
    if (part == 0) {
        hours = temp_value;
    } else if (part == 1) {
        minutes = temp_value;
    } else if (part == 2) {
        seconds = temp_value;
    }

    // Format the output string
    snprintf((char *)formatted, LEN_TIME, "%02d:%02d:%02d", hours, minutes, seconds);
	memcpy(time, formatted, LEN_TIME);
    return time;
}

int main() {
	while (yyparse()) {
		month[0] = '\0'; day[0] = '\0'; year[0] = '\0'; time[0] = '\0'; tz[0] = '\0';
	}
	return 0;
}
